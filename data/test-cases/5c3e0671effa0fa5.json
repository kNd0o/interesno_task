{
  "uid" : "5c3e0671effa0fa5",
  "name" : "Post creation fields",
  "fullName" : "tests.post_fields_test.TestPostCreationFields#test_post_fields",
  "historyId" : "2eb121d29b98d6e00bf3f74ac03096ee",
  "time" : {
    "start" : 1716117136477,
    "stop" : 1716117138894,
    "duration" : 2417
  },
  "description" : " Checks if validation messages under inputs are shown after focus change ",
  "descriptionHtml" : "<p>Checks if validation messages under inputs are shown after focus change</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <post_fields_test.TestPostCreationFields object at 0x7ff9846df500>\n\n    @allure.title('Post creation fields')\n    @allure.severity('Minor')\n    def test_post_fields(self):\n        \"\"\" Checks if validation messages under inputs are shown after focus change \"\"\"\n    \n        # Pre-condition\n>       self.login_page.login(self.data.EMAIL, self.data.PASSWORD)\n\ntests/post_fields_test.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:30: in login\n    self.click_submit()\npages/login_page.py:24: in click_submit\n    self.wait.until(EC.element_to_be_clickable(self.SUBMIT_BUTTON)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"94edb48a5dbfed725495b46950a204c4\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7ff983d90d60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1716117136152,
      "stop" : 1716117136476,
      "duration" : 324
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1716117136476,
      "stop" : 1716117136476,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : " Checks if validation messages under inputs are shown after focus change ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <post_fields_test.TestPostCreationFields object at 0x7ff9846df500>\n\n    @allure.title('Post creation fields')\n    @allure.severity('Minor')\n    def test_post_fields(self):\n        \"\"\" Checks if validation messages under inputs are shown after focus change \"\"\"\n    \n        # Pre-condition\n>       self.login_page.login(self.data.EMAIL, self.data.PASSWORD)\n\ntests/post_fields_test.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:30: in login\n    self.click_submit()\npages/login_page.py:24: in click_submit\n    self.wait.until(EC.element_to_be_clickable(self.SUBMIT_BUTTON)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"94edb48a5dbfed725495b46950a204c4\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7ff983d90d60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
    "steps" : [ {
      "name" : "Open https://test.qa.saritasa.com/admin/login page",
      "time" : {
        "start" : 1716117136477,
        "stop" : 1716117136731,
        "duration" : 254
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Entering email",
      "time" : {
        "start" : 1716117136731,
        "stop" : 1716117136782,
        "duration" : 51
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "email",
        "value" : "''"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Entering password",
      "time" : {
        "start" : 1716117136782,
        "stop" : 1716117136839,
        "duration" : 57
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "password",
        "value" : "'NewQA123!'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "Clicking submit button",
      "time" : {
        "start" : 1716117136839,
        "stop" : 1716117138894,
        "duration" : 2055
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/login_page.py\", line 24, in click_submit\n    self.wait.until(EC.element_to_be_clickable(self.SUBMIT_BUTTON)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 4
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1716117138900,
      "stop" : 1716117138957,
      "duration" : 57
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Post fields testing"
  }, {
    "name" : "severity",
    "value" : "Minor"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "post_fields_test"
  }, {
    "name" : "subSuite",
    "value" : "TestPostCreationFields"
  }, {
    "name" : "host",
    "value" : "6e2a86cc5387"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.post_fields_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "minor",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "92ba53bf6629dc1f",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not iterable",
        "time" : {
          "start" : 1716116470045,
          "stop" : 1716116470335,
          "duration" : 290
        }
      }, {
        "uid" : "749c75a5f7a6e7bd",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not iterable",
        "time" : {
          "start" : 1716116321631,
          "stop" : 1716116322113,
          "duration" : 482
        }
      }, {
        "uid" : "fc0bb9a860a71b83",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not iterable",
        "time" : {
          "start" : 1716115468080,
          "stop" : 1716115468283,
          "duration" : 203
        }
      }, {
        "uid" : "caa89c9e46a98b3a",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not iterable",
        "time" : {
          "start" : 1716113753679,
          "stop" : 1716113753877,
          "duration" : 198
        }
      }, {
        "uid" : "4b200c983a23d53c",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not iterable",
        "time" : {
          "start" : 1716113255880,
          "stop" : 1716113256157,
          "duration" : 277
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5c3e0671effa0fa5.json",
  "parameterValues" : [ ]
}